using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FlashOWare.Tool.Core.UsingDirectives;

//TODO: Initial Release Version (MVP)
//Ignore auto-generated documents and auto-generated code, see https://sourceroslyn.io/#Microsoft.CodeAnalysis/InternalUtilities/GeneratedCodeUtilities.cs
//  Refactor: extract methods
//  See: https://learn.microsoft.com/en-us/dotnet/csharp/nullable-references
//check if CSharp project, throw if VisualBasic project (not supported)
//support cancellation via CancellationToken
//  see: https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting/src/Internal/ConsoleLifetime.netcoreapp.cs

public static class UsingCounter
{
    public static async Task<UsingCountResult> CountAsync(Project project)
    {
        var result = new UsingCountResult();

        foreach (Document document in project.Documents)
        {
            if (document.Name.StartsWith("TemporaryGeneratedFile_", StringComparison.Ordinal) ||
                document.Name.EndsWith(".designer.cs", StringComparison.Ordinal) ||
                document.Name.EndsWith(".generated.cs", StringComparison.Ordinal) ||
                document.Name.EndsWith(".g.cs", StringComparison.Ordinal) ||
                document.Name.EndsWith(".g.i.cs", StringComparison.Ordinal))
            {
                continue;
            }

            SyntaxNode? syntaxRoot = await document.GetSyntaxRootAsync();

            if (syntaxRoot is null)
            {
                throw new NotSupportedException($"{nameof(Document)}.{nameof(Document.SupportsSyntaxTree)} = {document.SupportsSyntaxTree} ({document.Name})");
            }

            var compilationUnit = (CompilationUnitSyntax)syntaxRoot;

            SyntaxNode firstNode = compilationUnit.ChildNodes().First();
            if (firstNode.HasLeadingTrivia)
            {
                var list = firstNode.GetLeadingTrivia();
                var trivia = list[0];
                if (trivia.IsKind(SyntaxKind.SingleLineCommentTrivia))
                {
                    if (trivia.ToFullString().StartsWith("//<auto-generated>") ||
                        trivia.ToFullString().StartsWith("//<auto-generated/>"))
                    {
                        continue;
                    }
                }
                if (trivia.IsKind(SyntaxKind.MultiLineCommentTrivia))
                {
                    if (trivia.ToFullString().StartsWith("/*<auto-generated>") ||
                        trivia.ToFullString().StartsWith("/*<auto-generated/>"))
                    {
                        continue;
                    }
                }
            }

            AggregateUsings(result, compilationUnit);
        }

        return result;
    }

    private static void AggregateUsings(UsingCountResult result, CompilationUnitSyntax compilationUnit)
    {
        foreach (UsingDirectiveSyntax usingNode in compilationUnit.Usings)
        {
            if (usingNode.Alias is not null)
            {
                continue;
            }
            if (!usingNode.GlobalKeyword.IsKind(SyntaxKind.None))
            {
                continue;
            }
            if (!usingNode.StaticKeyword.IsKind(SyntaxKind.None))
            {
                continue;
            }

            string identifier = usingNode.Name.ToString();
            result.IncrementOrAdd(identifier);
        }
    }
}
