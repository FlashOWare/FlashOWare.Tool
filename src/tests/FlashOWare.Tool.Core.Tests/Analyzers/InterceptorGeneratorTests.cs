using Basic.Reference.Assemblies;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;

namespace FlashOWare.Tool.Core.Tests.Analyzers;

public class InterceptorGeneratorTests
{
    private readonly Dictionary<string, string> _features;

    private readonly ISourceGenerator _generator;
    private readonly IEnumerable<ISourceGenerator> _generators;

    public InterceptorGeneratorTests()
    {
        _features = new Dictionary<string, string>(1)
        {
            { "InterceptorsPreviewNamespaces", "AutoGenerated" },
        };
        _generator = new InterceptorGenerator().AsSourceGenerator();
        _generators = ImmutableArray.Create(_generator);
    }

    [Fact]
    public void RunGeneratorsAndUpdateCompilation_InterceptableSourceText_AddInterceptor()
    {
        //Arrange
        var parseOptions = new CSharpParseOptions(LanguageVersion.CSharp12).WithFeatures(_features);

        GeneratorDriver driver = CSharpGeneratorDriver.Create(_generators, null, parseOptions, null, default);

        Compilation compilation = CSharpCompilation.Create("AssemblyName",
            new[]
            {
                CSharpSyntaxTree.ParseText("""
                    using System;
                    using MyNamespace;

                    Console.WriteLine("Hello, World!");

                    Invoker.Invoke();
                    """, parseOptions, "Program.cs"),
                CSharpSyntaxTree.ParseText("""
                    using System;
                    using AutoGenerated;

                    namespace MyNamespace;

                    internal static class Invoker
                    {
                        [Interceptable]
                        public static void Invoke()
                        {
                            Console.WriteLine("Interceptable");
                        }
                    }
                    """, parseOptions, "Invoker.cs"),
            },
            ReferenceAssemblies.Net60,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));

        //Act
        driver = driver.RunGeneratorsAndUpdateCompilation(compilation, out Compilation outputCompilation, out ImmutableArray<Diagnostic> diagnostics, CancellationToken.None);

        //Assert
        Assert.Empty(diagnostics);
        Assert.Equal(4, outputCompilation.SyntaxTrees.Count());
        Assert.Empty(outputCompilation.GetDiagnostics());

        GeneratorDriverRunResult runResult = driver.GetRunResult();
        Assert.Equal(2, runResult.GeneratedTrees.Length);
        Assert.Empty(runResult.Diagnostics);

        GeneratorRunResult result = runResult.Results.Single();
        Assert.Same(result.Generator, _generator);
        Assert.Empty(result.Diagnostics);
        Assert.Equal(2, result.GeneratedSources.Length);
        Assert.Null(result.Exception);

        Assert.Equal("AutoGenerated.InterceptableAttribute.g.cs", result.GeneratedSources[0].HintName);
        Assert.Equal("""
            // <auto-generated/>

            namespace AutoGenerated;

            [global::System.AttributeUsage(global::System.AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
            internal sealed class InterceptableAttribute : global::System.Attribute
            {
            }
            """, result.GeneratedSources[0].SourceText.ToString());
        Assert.Equal("MyNamespace.Invoker.Invoke.g.cs", result.GeneratedSources[1].HintName);
        Assert.Equal("""
            // <auto-generated/>

            namespace AutoGenerated
            {
                using System.Runtime.CompilerServices;

                internal static class Interceptors
                {
                    [InterceptsLocation(@"Program.cs", 6, 9)]
                    internal static void Interceptor()
                    {
                        global::System.Console.WriteLine("Interceptor");
                    }
                }
            }

            #pragma warning disable CS9113 // Parameter is unread.
            namespace System.Runtime.CompilerServices
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("FlashOWare.Tool.Core.Tests", "1.0.0.0")]
                [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute(string filePath, int line, int character) : global::System.Attribute
                {
                }
            }
            #pragma warning restore CS9113 // Parameter is unread.
            """, result.GeneratedSources[1].SourceText.ToString());
    }

    [Fact]
    public void RunGeneratorsAndUpdateCompilation_NonInterceptableSourceText_DoesNotAddInterceptor()
    {
        //Arrange
        var parseOptions = new CSharpParseOptions(LanguageVersion.CSharp12).WithFeatures(_features);

        GeneratorDriver driver = CSharpGeneratorDriver.Create(_generators, null, parseOptions, null, default);

        Compilation compilation = CSharpCompilation.Create("AssemblyName",
            new[]
            {
                CSharpSyntaxTree.ParseText("""
                    using System;
                    using MyNamespace;

                    Console.WriteLine("Hello, World!");

                    Invoker.Invoke();
                    """, parseOptions, "Program.cs"),
                CSharpSyntaxTree.ParseText("""
                    using System;
                    using AutoGenerated;

                    namespace MyNamespace;

                    internal static class Invoker
                    {
                        public static void Invoke()
                        {
                            Console.WriteLine("Not Interceptable");
                        }
                    }
                    """, parseOptions, "Invoker.cs"),
            },
            ReferenceAssemblies.Net60,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));

        //Act
        driver = driver.RunGeneratorsAndUpdateCompilation(compilation, out Compilation outputCompilation, out ImmutableArray<Diagnostic> diagnostics, CancellationToken.None);

        //Assert
        Assert.Empty(diagnostics);
        Assert.Equal(3, outputCompilation.SyntaxTrees.Count());
        Diagnostic diagnostic = Assert.Single(outputCompilation.GetDiagnostics());
        Assert.Equal(DiagnosticSeverity.Hidden, diagnostic.Severity);
        Assert.Equal("CS8019", diagnostic.Id);
        Assert.Equal("Unnecessary using directive.", diagnostic.GetMessage());

        GeneratorDriverRunResult runResult = driver.GetRunResult();
        Assert.Single(runResult.GeneratedTrees);
        Assert.Empty(runResult.Diagnostics);

        GeneratorRunResult result = runResult.Results.Single();
        Assert.Same(result.Generator, _generator);
        Assert.Empty(result.Diagnostics);
        Assert.Single(result.GeneratedSources);
        Assert.Null(result.Exception);

        Assert.Equal("AutoGenerated.InterceptableAttribute.g.cs", result.GeneratedSources[0].HintName);
        Assert.Equal("""
            // <auto-generated/>

            namespace AutoGenerated;

            [global::System.AttributeUsage(global::System.AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
            internal sealed class InterceptableAttribute : global::System.Attribute
            {
            }
            """, result.GeneratedSources[0].SourceText.ToString());
    }
}
